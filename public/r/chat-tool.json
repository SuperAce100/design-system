{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "chat-tool",
  "type": "registry:component",
  "title": "Chat Tool",
  "description": "A chat tool component that displays tool calls and their results.",
  "dependencies": [
    "ai",
    "@radix-ui/react-accordion",
    "lucide-react"
  ],
  "registryDependencies": [
    "accordion"
  ],
  "files": [
    {
      "path": "registry/new-york/blocks/chat-tool/chat-tool.tsx",
      "content": "import {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/ui/accordion\";\nimport { DynamicToolUIPart, ToolUIPart } from \"ai\";\nimport { cn } from \"@/lib/utils\";\nimport { Wrench, Loader2, Check, AlertCircle } from \"lucide-react\";\n\n// Helper function to get state information\nfunction getStateInfo(state: string) {\n  switch (state) {\n    case \"input-streaming\":\n      return {\n        icon: Wrench,\n        label: \"Using \",\n        color: \"text-muted-foreground\",\n      };\n    case \"input-available\":\n      return {\n        icon: Loader2,\n        label: \"Using \",\n        color: \"text-muted-foreground\",\n      };\n    case \"output-available\":\n      return {\n        icon: Check,\n        label: \"Used \",\n        color: \"text-green-500\",\n      };\n    case \"output-error\":\n      return {\n        icon: AlertCircle,\n        label: \"Failed to use\",\n        color: \"text-red-500\",\n      };\n    default:\n      return {\n        icon: Wrench,\n        label: \"Using\",\n        color: \"text-gray-500\",\n      };\n  }\n}\n\n// Helper function to safely render unknown values\nfunction renderValue(value: unknown): React.ReactNode {\n  if (typeof value === \"string\") {\n    return value;\n  }\n  return JSON.stringify(value, null, 2);\n}\n\nexport default function ChatTool({\n  toolMessagePart,\n  className,\n}: {\n  toolMessagePart: ToolUIPart | DynamicToolUIPart;\n  className?: string;\n}) {\n  const toolName =\n    toolMessagePart.type === \"dynamic-tool\"\n      ? toolMessagePart.toolName\n      : toolMessagePart.type.replace(\"tool-\", \"\");\n\n  const stateInfo = getStateInfo(toolMessagePart.state);\n  const StateIcon = stateInfo.icon;\n\n  return (\n    <Accordion type=\"single\" collapsible className=\"w-full\">\n      <AccordionItem\n        value=\"tool\"\n        className={cn(\n          \"px-2 border rounded-xl hover:no-underline py-2 w-full last:border-b shadow-xs\",\n          className\n        )}\n      >\n        <AccordionTrigger className={cn(\"py-0 hover:no-underline hover:opacity-70 transition-all\")}>\n          <span className=\"flex items-center gap-2\">\n            <StateIcon\n              className={cn(\n                \"w-4 h-4\",\n                stateInfo.color,\n                toolMessagePart.state === \"input-available\" && \"animate-spin\"\n              )}\n            />\n            <span className=\"text-sm\">\n              {stateInfo.label} {toolName}\n            </span>\n          </span>\n        </AccordionTrigger>\n        <AccordionContent className=\"pb-0\">\n          <div className=\"flex flex-col gap-3 w-full pt-2\">\n            {/* Error Section - show for failed executions */}\n            {toolMessagePart.state === \"output-error\" && toolMessagePart.errorText && (\n              <div className=\"bg-red-500/5 border rounded-md p-2 text-sm overflow-x-auto whitespace-pre-wrap text-red-700 dark:text-red-300 w-full\">\n                {toolMessagePart.errorText}\n              </div>\n            )}\n            {/* Input Section - always show if available */}\n            {\"input\" in toolMessagePart &&\n            toolMessagePart.input !== undefined &&\n            toolMessagePart.input !== null ? (\n              <div className=\"w-full\">\n                <div className=\"text-xs font-semibold text-muted-foreground mb-1\">Input</div>\n                <pre className=\"bg-muted rounded-md p-2 text-sm overflow-x-auto whitespace-pre-wrap w-full\">\n                  {renderValue(toolMessagePart.input)}\n                </pre>\n              </div>\n            ) : (\n              <div className=\"text-xs text-muted-foreground\">No input</div>\n            )}\n\n            {/* Output Section - show for successful completion */}\n            {toolMessagePart.state === \"output-available\" &&\n              \"output\" in toolMessagePart &&\n              toolMessagePart.output !== undefined &&\n              toolMessagePart.output !== null && (\n                <div className=\"w-full\">\n                  <div className=\"text-xs font-semibold text-muted-foreground mb-1\">Output</div>\n                  <pre className=\"bg-muted rounded-md p-2 text-sm overflow-x-auto whitespace-pre-wrap w-full\">\n                    {renderValue(toolMessagePart.output)}\n                  </pre>\n                </div>\n              )}\n          </div>\n        </AccordionContent>\n      </AccordionItem>\n    </Accordion>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/chat/chat-tool.tsx"
    },
    {
      "path": "components/ui/accordion.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDownIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Accordion({\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Root>) {\n  return <AccordionPrimitive.Root data-slot=\"accordion\" {...props} />\n}\n\nfunction AccordionItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Item>) {\n  return (\n    <AccordionPrimitive.Item\n      data-slot=\"accordion-item\"\n      className={cn(\"border-b last:border-b-0\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction AccordionTrigger({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Trigger>) {\n  return (\n    <AccordionPrimitive.Header className=\"flex\">\n      <AccordionPrimitive.Trigger\n        data-slot=\"accordion-trigger\"\n        className={cn(\n          \"focus-visible:border-ring focus-visible:ring-ring/50 flex flex-1 items-start justify-between gap-4 rounded-md py-4 text-left text-sm font-medium transition-all outline-none hover:underline focus-visible:ring-[3px] disabled:pointer-events-none disabled:opacity-50 [&[data-state=open]>svg]:rotate-180\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        <ChevronDownIcon className=\"text-muted-foreground pointer-events-none size-4 shrink-0 translate-y-0.5 transition-transform duration-200\" />\n      </AccordionPrimitive.Trigger>\n    </AccordionPrimitive.Header>\n  )\n}\n\nfunction AccordionContent({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Content>) {\n  return (\n    <AccordionPrimitive.Content\n      data-slot=\"accordion-content\"\n      className=\"data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down overflow-hidden text-sm\"\n      {...props}\n    >\n      <div className={cn(\"pt-0 pb-4\", className)}>{children}</div>\n    </AccordionPrimitive.Content>\n  )\n}\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}